# -*- coding: utf-8 -*-
"""ceaser_railfence.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n9xV5mjgZQ8g6LSCkDhkacOEiqfVQs0m
"""

# Caesear ecrypt
def caesar_encrypt(text : str, shift : int) -> str:
    encrypted_text = ""

    if(shift < 0):
      shift = 26 + (shift % 26)

    if(shift == 0):
      return text

    if(shift > 26):
      shift = shift % 26

    if(text == ""):
      return encrypted_text

    for char in text:

      if char.isalpha():

        if char.isupper():
          encrypted_text += chr((ord(char) + shift - 65) % 26 + 65)

        else:
          encrypted_text += chr((ord(char) + shift - 97) % 26 + 97)

      else:
        encrypted_text += char

    return encrypted_text


# Caeser decrypt
def caesar_decrypt(text : str, shift : int) -> str:
    return caesar_encrypt(text, -shift)

# Rail fence index generator (generates indices for the railfence)
def railfence_idx_generator(rails, length):
    if rails <= 1:
        for _ in range(length):
            yield 0
        return

    current_rail = 0
    direction = 1

    for _ in range(length):
        yield current_rail

        if current_rail == 0:
            direction = 1
        elif current_rail == rails - 1:
            direction = -1

        current_rail += direction

# Railfence Encrypt
def rail_fence_encrypt(plain_text : str, rails : int) -> str:
    if rails <= 1:
        return plain_text

    fence = [[] for _ in range(rails)]

    for char, rail_index in zip(plain_text, railfence_idx_generator(rails, len(plain_text))):
        fence[rail_index].append(char)

    return "".join("".join(rail) for rail in fence)


# Railfence Decrypt
def rail_fence_decrypt(ciphertext : str, rails : int) -> str:
    if rails <= 1:
        return ciphertext

    fence_lengths = [0] * rails
    for rail_index in railfence_idx_generator(rails, len(ciphertext)):
        fence_lengths[rail_index] += 1

    fence = [[] for _ in range(rails)]
    cipher_iterator = iter(ciphertext)
    for i in range(rails):
        for _ in range(fence_lengths[i]):
            fence[i].append(next(cipher_iterator))

    plain_text = []
    for rail_index in railfence_idx_generator(rails, len(ciphertext)):
        plain_text.append(fence[rail_index].pop(0))

    return "".join(plain_text)

if __name__ == "__main__":

    while True:
        print("\n--- Menu ---")
        print("1. Encrypt with Caesar Cipher")
        print("2. Decrypt with Caesar Cipher")
        print("3. Encrypt with Rail Fence Cipher")
        print("4. Decrypt with Rail Fence Cipher")
        print("5. Exit")

        choice = input("Enter your choice (1-5): ")

        if choice == '1':
            plaintext = input("Enter the message to encrypt: ")
            while True:
                try:
                    shift = int(input("Enter the shift key (an integer): "))
                    break

                except ValueError:
                    print("Invalid input. Please enter an integer for the shift key.")

            encrypted = caesar_encrypt(plaintext, shift)

            print(f"\nEncrypted Text: {encrypted}")

        elif choice == '2':

            plaintext = input("Enter the message to decrypt: ")

            while True:
                try:
                    shift = int(input("Enter the shift key (an integer): "))
                    break

                except ValueError:
                    print("Invalid input. Please enter an integer for the shift key.")

            decrypted = caesar_decrypt(plaintext, shift)
            print(f"\nDecrypted Text: {decrypted}")

        elif choice == '3':

            plaintext = input("Enter the message to encrypt: ")
            while True:
                try:
                    num_rails = int(input("Enter the number of rails (e.g., 3): "))
                    if num_rails > 1:
                        break

                    else:
                        print("Number of rails must be greater than 1.")

                except ValueError:
                    print("Invalid input. Please enter an integer for the number of rails.")

            encrypted = rail_fence_encrypt(plaintext, num_rails)
            print(f"\nEncrypted Text: {encrypted}")

        elif choice == '4':
            plaintext = input("Enter the message to decrypt: ")

            while True:
                try:
                    num_rails = int(input("Enter the number of rails (e.g., 3): "))

                    if num_rails > 1:
                        break

                    else:
                        print("Number of rails must be greater than 1.")

                except ValueError:
                    print("Invalid input. Please enter an integer for the number of rails.")

            decrypted = rail_fence_decrypt(plaintext, num_rails)
            print(f"\nDecrypted Text: {decrypted}")

        elif choice == '5':
            print("Exiting")
            break

        else:
            print("Invalid choice. Please enter a number between 1 and 5.")

